/* 
Benjamin Sims 
This File: .java
Required Files: none
Description: Calendar App
Usage:  
Input: none
Output: GUI Calendar
*/

import javax.swing.*;
import java.awt.*;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.GregorianCalendar;


public class Calendar extends JFrame{
    //Make calendar for todays date
    GregorianCalendar calendar = new GregorianCalendar();
    
    //Make JLabels for the date and days of the week
    private final JLabel weekDays = new JLabel();
    private JLabel monthYear = new JLabel();
    
    //Make main body of calendar, top body, and buttons for the bottom
    JPanel body = new JPanel();
    JPanel header = new JPanel();
    JPanel buttons = new JPanel();
    
    /*Make counters for the number of spaces needed to be blank, and number of 
    days in the month, and for the number of rows the calender will have*/
    int startday;
    int daysOfTheMonth;
    int rowCounter;
    
    int month = calendar.get(GregorianCalendar.MONTH) + 1; 
    int year = calendar.get(GregorianCalendar.YEAR);
    
    public static void main(String[] args){
        Calendar frame = new Calendar();
        frame.pack();
        frame.setTitle("Ben's Calendar");
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
    
    public Calendar(){
        //Make panel for dates
        body.setLayout(new GridLayout(0, 7, 0, -5));
        header.setLayout(new BorderLayout());
        
        body = layout(year, month);
        
        header = headerLayout(year, month);
        
        JButton next = new JButton("==>");
        JButton previous = new JButton("<==");
        
        next.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                month++;
                if (month > 12){
                    month = 1;
                    year++;
                }
                body.removeAll();
                body = layout(year, month);
                body.setPreferredSize(new Dimension(530, rowCounter));
                body.updateUI();
                
                header.removeAll();
                header = headerLayout(year, month);
                header.updateUI();
                
                pack();
            }
        });
        
        previous.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                month--;
                if (month < 1){
                    month = 12;
                    year--;
                }
                body.removeAll();
                body = layout(year, month);
                body.setPreferredSize(new Dimension(530, rowCounter));
                body.updateUI();
                
                header.removeAll();
                header = headerLayout(year, month);
                header.updateUI();
                
                pack();
            }
        });
        
        buttons.add(previous, BorderLayout.WEST);
        buttons.add(next, BorderLayout.EAST);
        
        add(buttons, BorderLayout.SOUTH);
        
        //Set size based on rowCounter
        body.setPreferredSize(new Dimension(530, rowCounter));
        add(body, BorderLayout.CENTER);
        
        
        //Make and add week object
        add(header, BorderLayout.NORTH);
    }
    
    public JPanel layout(int year, int month){
        
        //Fill body with date and blank labels based on the current date.
        
        startday = setUp.getStartDay(year, month);
        daysOfTheMonth = setUp.getNumberOfDaysInMonth(year, month);
        
        for (int i = 0; i < startday; i++){
            body.add(new date());
        }
        for (int i = 1; i <= daysOfTheMonth; i++)
            body.add(new date("" + i, month, year));
        
        //if statment that decides how many pixels are needed for the higth
        if (startday + daysOfTheMonth > 35)
            rowCounter = 550;
        else if (startday + daysOfTheMonth > 28)
            rowCounter = 455;
        else
            rowCounter = 365;
        
        return body;
    }
    
    public JPanel headerLayout(int year, int month){
        
        weekDays.setText("      Sunday          Monday           Tuesday      Wednesday     Thursday         Friday           Saturday");
        weekDays.setVerticalAlignment(JLabel.BOTTOM);
        weekDays.setVerticalTextPosition(JLabel.BOTTOM);
        
        monthYear = setUp.layout(year, month);
        
        header.add(monthYear, BorderLayout.NORTH);
        header.add(weekDays, BorderLayout.SOUTH);
        
        return header;
    }
}


import javax.swing.JLabel;

public class setUp {
    
    public setUp(){  
    }
    
    //Get start day of the week for first day of the month
    public static int getStartDay(int year, int month){
        final int START_DAY_FOR_JAN_1_1970 = 6;
        int totalNumberOfDays = getTotalNumberOfDays(year, month);
        
        return (totalNumberOfDays + START_DAY_FOR_JAN_1_1970) % 7;
    }
    
    //Get the total number of days since Jan 1 1970
    public static int getTotalNumberOfDays(int year, int month){
        int total = 0;
        
        for (int i = 1970; i < year; i++)
            if (isLeapYear(i))
                total = total + 366;
            else 
                total = total + 365;
        
        for (int i = 0; i < month; i++)
            total = total + getNumberOfDaysInMonth(year, i);
        return total;
    }
    
    //Get the number of days in a month
    public static int getNumberOfDaysInMonth(int year, int month){
        if (month == 1 || month == 3 || month == 5 || month == 7 ||
                month == 8 || month == 10 || month == 12)
            return 31;
        if (month == 4 || month == 6 || month == 9 || month == 11)
            return 30;
        if (month == 2)
            return isLeapYear(year) ? 29 : 28;
        return 12;
    }
    
    //Check if a year is a leap year
    public static boolean isLeapYear(int year){
        return year % 400 == 0 || (year % 4 == 0 && 100 != 0);
    }
    
    
    
    //Layout for top of calendar
    public static JLabel layout(int year, int month){
        JLabel label = new JLabel();
        label.setText(getMonth(month) + " " + year);
        label.setHorizontalTextPosition(JLabel.CENTER);
        label.setHorizontalAlignment(JLabel.CENTER);
        return label;
    }
    
    //Method used to convert Calender.MONTH into a word
    public static String getMonth(int month){
        String monthName = "";
        switch (month - 1){
            case 0: monthName = "January"; break;
            case 1: monthName = "February"; break;
            case 2: monthName = "March"; break;
            case 3: monthName = "April"; break;
            case 4: monthName = "May"; break;
            case 5: monthName = "June"; break;
            case 6: monthName = "July"; break;
            case 7: monthName = "August"; break;
            case 8: monthName = "September"; break;
            case 9: monthName = "October"; break;
            case 10: monthName = "November"; break;
            case 11: monthName = "December"; break;
        }
        
        return monthName;
    }

}


import javax.swing.*;
import java.awt.*;
import javax.swing.border.*;
import java.util.GregorianCalendar;


public class date extends JPanel {
    private JLabel jlblDate = new JLabel();
    LineBorder lineBorder = new LineBorder(Color.BLACK, 1);
    
    //Calendar used to highlight day
    GregorianCalendar calendar = new GregorianCalendar();
    
    //Blank JLabel
    public date(){
    }
    
    public date(String day, int month, int year){
        
        //Set up for each date 
        jlblDate.setText(day);
        jlblDate.setPreferredSize(new Dimension(75, 90));
        jlblDate.setHorizontalAlignment(JLabel.RIGHT);
        jlblDate.setVerticalAlignment(JLabel.TOP);
        jlblDate.setHorizontalTextPosition(SwingConstants.RIGHT);
        jlblDate.setVerticalTextPosition(JLabel.TOP);
        jlblDate.setBorder(lineBorder);
        
        //If statment make the current day highlighted red
        if ((jlblDate.getText().compareTo("" + calendar.get(GregorianCalendar.DAY_OF_MONTH)) == 0) && 
              (month -1 == calendar.get(GregorianCalendar.MONTH)) && (year == calendar.get(GregorianCalendar.YEAR))){
            jlblDate.setBorder(new LineBorder(Color.RED, 3));
            jlblDate.setToolTipText("Today's Date");
        }
        add(jlblDate);
        
        
    }
}
